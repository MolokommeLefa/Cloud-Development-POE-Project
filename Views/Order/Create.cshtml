@model CLDV6212_GROUP_04.Models.Order

@{
    ViewData["Title"] = "Create New Order";
}

<div class="container-fluid">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="h3 text-primary">
                    <i class="fas fa-plus-circle me-2"></i>Create New Order
                </h1>
                <a asp-action="Index" class="btn btn-outline-secondary">
                    <i class="fas fa-arrow-left me-2"></i>Back to Orders
                </a>
            </div>

            <div class="card shadow-sm">
                <div class="card-header bg-light">
                    <h5 class="card-title mb-0">Order Information</h5>
                </div>
                <div class="card-body">
                    <form asp-action="Create" id="orderForm">
                        <div asp-validation-summary="ModelOnly" class="alert alert-danger"></div>

                        <div class="row">
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="CustomerId" class="form-label fw-bold">Customer *</label>
                                    <select asp-for="CustomerId" asp-items="ViewBag.Customers" class="form-select" required>
                                        <option value="">Select Customer</option>
                                    </select>
                                    <span asp-validation-for="CustomerId" class="text-danger small"></span>
                                </div>
                            </div>
                            <div class="col-md-6">
                                <div class="form-group mb-3">
                                    <label asp-for="ProductId" class="form-label fw-bold">Product *</label>
                                    <select asp-for="ProductId" asp-items="ViewBag.Products" class="form-select" id="productSelect" required>
                                        <option value="">Select Product</option>
                                    </select>
                                    <span asp-validation-for="ProductId" class="text-danger small"></span>
                                </div>
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-4">
                                <div class="form-group mb-3">
                                    <label asp-for="Quantity" class="form-label fw-bold">Quantity *</label>
                                    <input asp-for="Quantity" type="number" min="1" class="form-control" id="quantityInput" required />
                                    <span asp-validation-for="Quantity" class="text-danger small"></span>
                                    <small class="form-text text-muted" id="stockInfo">Available stock: </small>
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group mb-3">
                                    <label class="form-label fw-bold">Unit Price</label>
                                    <input type="text" class="form-control" id="unitPrice" readonly />
                                </div>
                            </div>
                            <div class="col-md-4">
                                <div class="form-group mb-3">
                                    <label class="form-label fw-bold">Total Price</label>
                                    <input type="text" class="form-control" id="totalPrice" readonly />
                                </div>
                            </div>
                        </div>

                        <div class="form-group mb-4">
                            <label asp-for="OrderStatus" class="form-label fw-bold">Order Status *</label>
                            <select asp-for="OrderStatus" class="form-select" required>
                                <option value="Pending">Pending</option>
                                <option value="Processing">Processing</option>
                                <option value="Completed">Completed</option>
                                <option value="Cancelled">Cancelled</option>
                            </select>
                            <span asp-validation-for="OrderStatus" class="text-danger small"></span>
                        </div>

                        <div class="form-group">
                            <button type="submit" class="btn btn-success">
                                <i class="fas fa-save me-2"></i>Create Order
                            </button>
                            <a asp-action="Index" class="btn btn-outline-secondary">
                                <i class="fas fa-times me-2"></i>Cancel
                            </a>
                        </div>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const productSelect = document.getElementById('productSelect');
            const quantityInput = document.getElementById('quantityInput');
            const unitPrice = document.getElementById('unitPrice');
            const totalPrice = document.getElementById('totalPrice');
            const stockInfo = document.getElementById('stockInfo');

            productSelect.addEventListener('change', function() {
                const productId = this.value;
                if (productId) {
                    fetch(`/Order/GetProductDetails?productId=${productId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data) {
                                unitPrice.value = 'R ' + data.price.toFixed(2);
                                stockInfo.textContent = 'Available stock: ' + data.stock;
                                calculateTotal();
                            }
                        });
                } else {
                    unitPrice.value = '';
                    totalPrice.value = '';
                    stockInfo.textContent = 'Available stock: ';
                }
            });

            quantityInput.addEventListener('input', calculateTotal);

            function calculateTotal() {
                const price = parseFloat(unitPrice.value.replace('R ', '')) || 0;
                const quantity = parseInt(quantityInput.value) || 0;
                totalPrice.value = 'R ' + (price * quantity).toFixed(2);
            }
        });
    </script>
}